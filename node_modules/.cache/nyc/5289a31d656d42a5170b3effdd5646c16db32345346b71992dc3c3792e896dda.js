/* Sample Test */'use strict';var cov_wg3cb796j=function(){var path="/Users/pato/Documents/nodejs-bp-api/src/todo/tests/controllers/todo.js";var hash="3e8ca984b2d6f8e6e4e6d5e4ebbdf876e9d38e6d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/pato/Documents/nodejs-bp-api/src/todo/tests/controllers/todo.js",statementMap:{"0":{start:{line:5,column:13},end:{line:5,column:28}},"1":{start:{line:6,column:23},end:{line:6,column:50}},"2":{start:{line:7,column:14},end:{line:7,column:30}},"3":{start:{line:8,column:15},end:{line:8,column:26}},"4":{start:{line:9,column:13},end:{line:9,column:41}},"5":{start:{line:10,column:0},end:{line:10,column:14}},"6":{start:{line:11,column:0},end:{line:11,column:25}},"7":{start:{line:14,column:0},end:{line:42,column:3}},"8":{start:{line:15,column:25},end:{line:15,column:66}},"9":{start:{line:18,column:2},end:{line:28,column:5}},"10":{start:{line:19,column:21},end:{line:19,column:37}},"11":{start:{line:21,column:4},end:{line:21,column:58}},"12":{start:{line:22,column:4},end:{line:27,column:7}},"13":{start:{line:23,column:6},end:{line:23,column:24}},"14":{start:{line:24,column:6},end:{line:24,column:25}},"15":{start:{line:25,column:6},end:{line:25,column:45}},"16":{start:{line:26,column:6},end:{line:26,column:13}},"17":{start:{line:31,column:2},end:{line:41,column:5}},"18":{start:{line:32,column:21},end:{line:32,column:37}},"19":{start:{line:34,column:4},end:{line:34,column:58}},"20":{start:{line:35,column:4},end:{line:40,column:7}},"21":{start:{line:36,column:6},end:{line:36,column:24}},"22":{start:{line:37,column:6},end:{line:37,column:25}},"23":{start:{line:38,column:6},end:{line:38,column:40}},"24":{start:{line:39,column:6},end:{line:39,column:13}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:28},end:{line:14,column:29}},loc:{start:{line:14,column:34},end:{line:42,column:1}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:34},end:{line:18,column:35}},loc:{start:{line:18,column:42},end:{line:28,column:3}},line:18},"2":{name:"(anonymous_2)",decl:{start:{line:22,column:14},end:{line:22,column:15}},loc:{start:{line:22,column:31},end:{line:27,column:5}},line:22},"3":{name:"(anonymous_3)",decl:{start:{line:31,column:28},end:{line:31,column:29}},loc:{start:{line:31,column:36},end:{line:41,column:3}},line:31},"4":{name:"(anonymous_4)",decl:{start:{line:35,column:14},end:{line:35,column:15}},loc:{start:{line:35,column:31},end:{line:40,column:5}},line:35}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"3e8ca984b2d6f8e6e4e6d5e4ebbdf876e9d38e6d"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const chai=(cov_wg3cb796j.s[0]++,require('chai'));const chaiAsPromised=(cov_wg3cb796j.s[1]++,require('chai-as-promised'));const sinon=(cov_wg3cb796j.s[2]++,require('sinon'));const expect=(cov_wg3cb796j.s[3]++,chai.expect);const Task=(cov_wg3cb796j.s[4]++,require('../../models/task'));cov_wg3cb796j.s[5]++;chai.should();cov_wg3cb796j.s[6]++;chai.use(chaiAsPromised);//TEST DRIVEN DEVELOPMENT
cov_wg3cb796j.s[7]++;describe('Todo Controller',()=>{cov_wg3cb796j.f[0]++;const expectedResult=(cov_wg3cb796j.s[8]++,{status:201,tasks:[{}],message:''});//Testing if the array has a valid status
cov_wg3cb796j.s[9]++;it('should get a valid status',done=>{cov_wg3cb796j.f[1]++;const TodoMock=(cov_wg3cb796j.s[10]++,sinon.mock(Task));cov_wg3cb796j.s[11]++;TodoMock.expects('find').yields(null,expectedResult);cov_wg3cb796j.s[12]++;Task.find((err,result)=>{cov_wg3cb796j.f[2]++;cov_wg3cb796j.s[13]++;TodoMock.verify();cov_wg3cb796j.s[14]++;TodoMock.restore();cov_wg3cb796j.s[15]++;expect(result.status).to.be.equal(201);cov_wg3cb796j.s[16]++;done();});});//Testing if the array has at least one value
cov_wg3cb796j.s[17]++;it('should return error',done=>{cov_wg3cb796j.f[3]++;const TodoMock=(cov_wg3cb796j.s[18]++,sinon.mock(Task));cov_wg3cb796j.s[19]++;TodoMock.expects('find').yields(expectedResult,null);cov_wg3cb796j.s[20]++;Task.find((err,result)=>{cov_wg3cb796j.f[4]++;cov_wg3cb796j.s[21]++;TodoMock.verify();cov_wg3cb796j.s[22]++;TodoMock.restore();cov_wg3cb796j.s[23]++;expect(err.status).to.not.be.true;//This is the actual test
cov_wg3cb796j.s[24]++;done();});});});